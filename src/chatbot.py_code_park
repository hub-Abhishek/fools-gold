from abc import ABC, abstractmethod

import chromadb
from chromadb.config import Settings

import langchain
from langchain.cache import InMemoryCache
from langchain.vectorstores import Chroma
from langchain.embeddings import HuggingFaceInstructEmbeddings
from langchain import HuggingFaceHub
from langchain.chains import RetrievalQA
from langchain.docstore.document import Document

from src.utils import print_message, get_aws_info, get_logger
from src.text_preprocessing import get_chunks    
# from src.resource_manager import Embeddings, Models


class bot_orchestrator(ABC):
    @abstractmethod
    def get_model_endponit(self):
        """Build the model"""
    
    @abstractmethod
    def build_embeddings(self):
        """Build the embeddings"""

    @abstractmethod
    def get_db_endpoint(self):
        """Build the database"""


class bot(bot_orchestrator):
    def __init__(self, names, config, secrets, aws=None, logger=None) -> None:
        self.embeddings_model_name = names[0]
        self.model_name = names[1]
        
        self.config = config
        self.secrets = secrets
        if aws is None:
            self.aws = get_aws_info(secrets)
        else:
            self.aws = aws
        if logger is None:
            self.logger = get_logger()
        else:
            self.logger = logger

        self.embeddings = HuggingFaceInstructEmbeddings(
                query_instruction="Represent the query for retrieval: ", 
                model_name=self.embeddings_model_name
                )

    def get_model_endponit(self):
        pass

    def get_db_endpoint(self):
        self.secrets['public_chroma_db']['url']
        settings = Settings(chroma_api_impl="rest",
                            # TODO: replace api with url
                            chroma_server_host=self.secrets['public_chroma_db']['api'],
                            chroma_server_http_port=self.secrets['public_chroma_db']['port_number'])
        chromadb = chromadb.Client(settings)
        # Testing if the connection is working
        chromadb.heartbeat()
        db = Chroma(client=chromadb, embedding_function=self.embeddings, collection_name=self.config['collection_name'])
        return db

    def build_embeddings(self):
        pass



class Chatbot(ABC):
    langchain.llm_cache = InMemoryCache()
    def __init__(self, chunks, model_repo, model_type, embeddings_model_name, model_name, st, new_files, model_kwargs, run_local, config=None, secrets=None) -> None:
        super().__init__()
        self.chunks = chunks
        self.model_repo = model_repo
        self.model_type = model_type
        self.embeddings_model_name = embeddings_model_name
        self.model_name = model_name
        self.st = st
        self.new_files = new_files
        self.model_kwargs = model_kwargs
        self.run_local = run_local
        self.query_ids = self.get_query_ids()
        self.config = config
        self.secrets = secrets


    def build_embeddings(self):
        if self.run_local:
            print_message('Building the embeddings...', st=self.st)
            # TODO: Add option to use custom embeddings
            return HuggingFaceInstructEmbeddings(
                query_instruction="Represent the query for retrieval: ", 
                model_name=self.embeddings_model_name
                )

    def build_model(self):
        if self.run_local:
            print_message('Building the model...', st=self.st)
            return HuggingFaceHub(
                repo_id=self.model_name, model_kwargs=self.model_kwargs)

    def build_db(self):
        
            settings = Settings(chroma_api_impl="rest",
                                chroma_server_host=self.secrets['public_chroma_db_api'],
                                chroma_server_http_port=self.secrets['port_number'])
            chromadb = chromadb.Client(settings)
            chromadb.heartbeat()
            db = Chroma(client=chromadb, embedding_function=self.embeddings, collection_name=self.config['collection_name'])
            return db

        # if self.run_local:
        # # print_message('Building the database...', st=self.st)





        #     try:
        #         settings = Settings(chroma_api_impl="rest",
        #                           chroma_server_host=self.secrets['public_chroma_db'],
        #                           chroma_server_http_port=8000)
        #         chromadb = chromadb.Client(settings)
                
        #         db = Chroma(client=chromadb, embedding_function=self.embeddings, collection_name=self.config['collection_name'])


        #         if len(db._collection.get()['documents']) < len(self.chunks):
        #             raise Exception
        #         print_message('Loaded existing Database ', st=self.st)
        #     except:
        #         print_message('Building new Database ', st=self.st)
        #         db = Chroma.from_documents(self.chunks, self.embeddings, persist_directory='app_database/db', llm=self.llm)
        #         db.persist()
            # return db
    
    def build_qa(self):
        if self.run_local:
            print_message('Building the QA model...', st=self.st)
            retriever = self.db.as_retriever()
            qa = RetrievalQA.from_chain_type(llm=self.llm, chain_type="stuff", retriever=retriever, return_source_documents=True)
            return qa

    def build_model_and_db(self):
        if self.run_local:
        
            self.embeddings = self.build_embeddings()        
            self.llm = self.build_model()
            self.db = self.build_db()
            self.qa = self.build_qa()
            return self.qa
    
    def get_query_ids(self):
        if self.run_local:
            with open('app_database/query_ids.txt','r') as f:
                ids = f.readlines()
                f.close()
            ids = [id.strip() for id in ids]
            return ids
    
    def delete_ids_from_db(self, ids):
        if self.run_local:
            self.db._collection.delete(ids=ids)
        
    
    def process_query(self, query):
        
        if self.run_local:
            self.query_ids = self.get_query_ids()
            existing_queries = self.db._collection.get(ids=self.query_ids)['documents']
            print_message(f'Existing queries: {existing_queries}', st=self.st)
            if query in existing_queries:
                print_message(f'Query already exists in the database. Returning the existing query id.', st=self.st)
            else:
                print_message(f'Query does not exist in the database. Adding the query to the database...', st=self.st)
                self.delete_ids_from_db(ids=self.query_ids)
                existing_queries = [Document(page_content='  '.join(existing_queries) + '  ' + query,  
                                            metadata={'title': 'query(ies)', 'query_number': 1})] # TODO - add query number


                chunks = get_chunks(existing_queries, new_files=False)
                self.query_ids = self.db.add_documents(chunks)
                self.db.persist()
                print_message(f'Query added to the database. Query id: {self.query_ids}, Query: {existing_queries}', st=self.st)
                with open('app_database/query_ids.txt','w') as f:
                    f.write('\n'.join(self.query_ids))
